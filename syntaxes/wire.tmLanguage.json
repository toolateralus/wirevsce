{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "wire",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#types"	
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#functions"
		}
	],
	"repository": {
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.wire",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b\\s*(?=\\()",
					"captures": {
						"0": {
							"name": "punctuation.definition.function.wire",
							"match": "\\("
						},
						"1": {
							"name": "meta.function-call.arguments.wire",
							"match": "[^\\)]*"
						},
						"2": {
							"name": "punctuation.definition.function.wire",
							"match": "\\)"
						}
					}
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.builtin.wire",
					"match": "\\b(enum|auto|float|i64|i32|i16|i8|double|bool|string|fn|dynamic|array|void)\\b"
				},
				{
					"name": "entity.name.type.class.wire",
					"match": "\\b[A-Z][a-zA-Z0-9]*\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.wire",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"comments": {
			"name": "comment.line.wire",
			"begin": "//",
			"end": "$"
		},
		"strings": {
			"name": "string.quoted.wire",
			"begin": "(\"|')",
			"end": "(\"|')",
			"patterns": [
				{
					"name": "constant.character.escape.wire",
					"match": "\\\\."
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.wire",
					"match": ":=|=|:"
				},
				{
					"name": "keyword.operator.arithmetic.wire",
					"match": "\\+|-|\\*|/|\\^"
				},
				{
					"name": "keyword.operator.comparison.wire",
					"match": "<|>"
				},
				{
					"name": "keyword.operator.logical.wire",
					"match": "\\||&|!"
				},
				{
					"name": "punctuation.separator.wire",
					"match": ",|\\|"
				},
				{
					"name": "punctuation.bracket.wire",
					"match": "\\(|\\)|\\{|\\}|\\[|\\]"
				},
				{
					"name": "punctuation.accessor.wire",
					"match": "\\."
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.flow.wire",
					"match": "\\b(while|for|if|else|continue|break|return)\\b"
				},
				{
					"name": "keyword.control.declaration.wire",
					"match": "\\b(macro|import|const|mut|struct)\\b"
				},
				{
					"name": "keyword.control.type.wire",
					"match": "\\b(varargs|typeof|sizeof|as)\\b"
				},
				{
					"name": "keyword.control.scope.wire",
					"match": "\\b(extern)\\b"
				},
				{
					"name": "variable.language.this.wire",
					"match": "\\bthis\\b"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer.wire",
					"match": "\\b[0-9]+\\b"
				},
				{
					"name": "constant.numeric.float.wire",
					"match": "\\b[0-9]+\\.[0-9]*[fF]?"
			}
			]
		}
	},
	"scopeName": "source.wire"
}